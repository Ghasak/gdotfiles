# ============================================================================================
#
#         ███████╗░██████╗██╗░░██╗░░░░░░██████╗░██████╗░░█████╗░███╗░░░███╗██████╗░████████╗
#         ╚════██║██╔════╝██║░░██║░░░░░░██╔══██╗██╔══██╗██╔══██╗████╗░████║██╔══██╗╚══██╔══╝
#         ░░███╔═╝╚█████╗░███████║█████╗██████╔╝██████╔╝██║░░██║██╔████╔██║██████╔╝░░░██║░░░
#         ██╔══╝░░░╚═══██╗██╔══██║╚════╝██╔═══╝░██╔══██╗██║░░██║██║╚██╔╝██║██╔═══╝░░░░██║░░░
#         ███████╗██████╔╝██║░░██║░░░░░░██║░░░░░██║░░██║╚█████╔╝██║░╚═╝░██║██║░░░░░░░░██║░░░
#         ╚══════╝╚═════╝░╚═╝░░╚═╝░░░░░░╚═╝░░░░░╚═╝░░╚═╝░╚════╝░╚═╝░░░░░╚═╝╚═╝░░░░░░░░╚═╝░░░
#
# ============================================================================================

autoload -U colors && colors
autoload -Uz vcs_info
#precmd() { vcs_info }
# - [] Adding douple sandwich layer while enter and exit a repo -> -<>- <- regular dir / repo dir.
#https://www.nerdfonts.com/cheat-sheet
OS_ICON=
OS_ICON=$'\uf179'
MAC_ICON=$'\uf6c3'
ARROW=$'\uf641' #  
ARROW=$'\ufb00'
ARROW=$'\uf101'
ARROW=$'\uf101'
ARROW=$'\uf054'
CIRCEL=$'\uf7b0'
#DIR_ICON=
#MAC_FINDER_ICON=$'\uf535'
MAC_FINDER_ICON=$'\uff115'
CLOCK_ICON=$'\uf64f'
ROBIN_HOOD_ICON=$'\uf2ae'
SINGEL_GEAR_ICON=$'\uf013'
IRON_MAN_ICON=$'\uf1d1'
REACT_ICON=$'\ue7ba'
ELECTRON_ICON=$'\ue62e'
CONNECTION_ICON=$'\uf20e'
REFRESH_ICON=$'\u'
APPLE_KEYBOARD=$'\ufb32'
CAMPASS_ICON=$'\uf68b'
CAMPASS_ICON2=$'\uf14e'
GOOGLE_ICON=$'\uf7ac'
ERRORCAST_ICON=$'\uf2da'
H_ICOND=$'\uf0fd'
H_ICOND2=$'\uf1dc'
SYNC_ICON=$'\uf46a'
GEAR_ICON=$'\uf085'
GIT_ICON=$'\uf7a3'
GIT_ICON2=$'\uf7a1'
HOUR_GLASS_ICON=$'\uf251'
GIT_BRANCH_ICON=$'\ue725'
RADIOACTIVE_ICON=$'\ue238'
ATOM_ICON=$'\ufc66'
SERVER_ICON2=$'\uf6d5'
#GEAR_ICON=kk
#
Date_ICON=$'\uF073'
git_ICON=
Netreno_ICON=
DESKTOP_TOWER_ICON=$'\uf6c4'
SERVER_ICON=$'\u'
GO_BACK_ARROWS_ICON=$'\u2B82'

MULTILINE_FIRST_PROMPT_PREFIX=$'\u256D\U2500'   # ╭─
MULTILINE_NEWLINE_PROMPT_PREFIX=$'\u251C\U2500' # ├─
MULTILINE_LAST_PROMPT_PREFIX=$'\u2570\U2500 '   # ╰─
RULER_CHAR=$'\u2500'                            #  ─
CARRIAGE_RETURN_ICON=$'\u21B5'                  # ↵
PROXY_ICON=$'\u2194'                            # ↔
VCS_REMOTE_BRANCH_ICON=$'\u2192'                # →
DIRENV_ICON=$'\u25BC'                           # ▼
ETC_ICON=$'\u2699'                              # ⚙
VCS_UNSTAGED_ICON=$'\u25CF'                     # ●
VCS_STASH_ICON=$'\u235F'                        # ⍟
VCS_INCOMING_CHANGES_ICON=$'\u2193'             # ↓
VCS_OUTGOING_CHANGES_ICON=$'\u2191'             # ↑
VCS_REMOTE_BRANCH_ICON=$'\u2192'                # →
VCS_BOOKMARK_ICON=$'\u263F'                     # ☿
LEFT_SEGMENT_SEPARATOR=$'\u2B80'                # ⮀
RIGHT_SEGMENT_SEPARATOR=$'\u2B82'               # ⮂
MEMEORY=$'\uf85a'
GIT_BRANCH_ICON=$'\ue0a0' #  => \uf418
AT_SYMPOLE=$'\uf564'
AT_SYMPOLE=$'\uf1fa'
left_half_circle_thick=$'\ue0b6'                #
right_half_circle_thick=$'\ue0b4'                    #
RULER_CHAR=$'\u2500'                             # ─
# as POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND below.
typeset -g LCU='%244F╭─'
typeset -g LCM='%244F├─'
typeset -g LCL='%244F╰─'
#Connect right prompt lines with these symbols.
typeset -g RCU='%244F─╮'
typeset -g RCM='%244F─┤'
typeset -g RCL='%244F─╯'
typeset -g RCU2='╭─'
typeset -g RCU2='╰'
typeset -g POINTING_ARROW='─➤'
  # PR_HBAR="─"
  # PR_ULCORNER="┌"
  # PR_LLCORNER="└"
  # PR_LRCORNER="┘"
  # PR_URCORNER="┐"
######
# Using A Splash of Colors
######
#use extended color palette if available
if [[ $terminfo[colors] -ge 256 ]]; then
    turquoise="%F{81}"
    orange="%F{166}"
    purple="%F{135}"
    hotpink="%F{161}"
    limegreen="%F{118}"
    darkblue="%F{30}"
else
    turquoise="%F{cyan}"
    orange="%F{yellow}"
    purple="%F{magenta}"
    hotpink="%F{red}"
    limegreen="%F{green}"
    darkblue="%F{blue}"
fi


COLOR_ARRY=(red blue yellow green)
RANDOM_COLOR=$((1 + RANDOM % ${#COLOR_ARRY[@]}))
SELECTED_COLOR=$(echo "${COLOR_ARRY[$RANDOM_COLOR]}")
# See if we can use colors.
autoload zsh/terminfo
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE GREY; do
  typeset -g PR_$color="%{$terminfo[bold]$fg[${(L)color}]%}"
  typeset -g PR_LIGHT_$color="%{$fg[${(L)color}]%}"
done
PR_NO_COLOUR="%{$terminfo[sgr0]%}"

# =============================================================================
#
#             █▀▀ █ ▀█▀ █▀ ▀█▀ ▄▀█ ▀█▀ █░█ █▀   █▀█ █░░ █░█ █▀▀ █ █▄░█
#             █▄█ █ ░█░ ▄█ ░█░ █▀█ ░█░ █▄█ ▄█   █▀▀ █▄▄ █▄█ █▄█ █ █░▀█
#             Simple Zsh prompt with Git status.

# =============================================================================
# Source gitstatus.plugin.zsh from $GITSTATUS_DIR or from the same directory
# in which the current script resides if the variable isn't set.
if [[ -f $HOME/gitstatus/gitstatus.plugin.zsh ]]; then
  source $HOME/gitstatus/gitstatus.plugin.zsh
else
  git clone --depth=1 https://github.com/romkatv/gitstatus.git $HOME/gitstatus
fi


#source "${GITSTATUS_DIR:-${${(%):-%x}:h}}/gitstatus.plugin.zsh" || return

# Sets GITSTATUS_PROMPT to reflect the state of the current git repository. Empty if not
# in a git repository. In addition, sets GITSTATUS_PROMPT_LEN to the number of columns
# $GITSTATUS_PROMPT will occupy when printed.
#
# Example:
#
#   GITSTATUS_PROMPT='master ⇣42⇡42 ⇠42⇢42 *42 merge ~42 +42 !42 ?42'
#   GITSTATUS_PROMPT_LEN=39
#
#   master  current branch
#      ⇣42  local branch is 42 commits behind the remote
#      ⇡42  local branch is 42 commits ahead of the remote
#      ⇠42  local branch is 42 commits behind the push remote
#      ⇢42  local branch is 42 commits ahead of the push remote
#      *42  42 stashes
#    merge  merge in progress
#      ~42  42 merge conflicts
#      +42  42 staged changes
#      !42  42 unstaged changes
#      ?42  42 untracked files
function gitstatus_prompt_update() {
  emulate -L zsh
  typeset -g  GITSTATUS_PROMPT=''
  typeset -gi GITSTATUS_PROMPT_LEN=0

  # Call gitstatus_query synchronously. Note that gitstatus_query can also be called
  # asynchronously; see documentation in gitstatus.plugin.zsh.
  gitstatus_query 'MY'                  || return 1  # error
  [[ $VCS_STATUS_RESULT == 'ok-sync' ]] || return 0  # not a git repo

  local      clean='%217F'  # green foreground
  local   modified='%178F'  # yellow foreground
  local  untracked='%39F'   # blue foreground
  local conflicted='%196F'  # red foreground

  local p

  local where  # branch name, tag or commit
  if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
    where=$VCS_STATUS_LOCAL_BRANCH
  elif [[ -n $VCS_STATUS_TAG ]]; then
    p+='%f#'
    where=$VCS_STATUS_TAG
  else
    p+='%f@'
    where=${VCS_STATUS_COMMIT[1,8]}
  fi

  (( $#where > 32 )) && where[13,-13]="…"  # truncate long branch names and tags
  p+="${clean}${where//\%/%%}"             # escape %

  # ⇣42 if behind the remote.
  (( VCS_STATUS_COMMITS_BEHIND )) && p+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
  # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
  (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && p+=" "
  (( VCS_STATUS_COMMITS_AHEAD  )) && p+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
  # ⇠42 if behind the push remote.
  (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
  (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" "
  # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
  (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && p+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
  # *42 if have stashes.
  (( VCS_STATUS_STASHES        )) && p+=" ${clean}*${VCS_STATUS_STASHES}"
  # 'merge' if the repo is in an unusual state.
  [[ -n $VCS_STATUS_ACTION     ]] && p+=" ${conflicted}${VCS_STATUS_ACTION}"
  # ~42 if have merge conflicts.
  (( VCS_STATUS_NUM_CONFLICTED )) && p+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
  # +42 if have staged changes.
  (( VCS_STATUS_NUM_STAGED     )) && p+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
  # !42 if have unstaged changes.
  (( VCS_STATUS_NUM_UNSTAGED   )) && p+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
  # ?42 if have untracked files. It's really a question mark, your font isn't broken.
  (( VCS_STATUS_NUM_UNTRACKED  )) && p+=" ${untracked}?${VCS_STATUS_NUM_UNTRACKED}"

  GITSTATUS_PROMPT="${p}%f"

  # The length of GITSTATUS_PROMPT after removing %f and %F.
  GITSTATUS_PROMPT_LEN="${(m)#${${GITSTATUS_PROMPT//\%\%/x}//\%(f|<->F)}}"
}

# Start gitstatusd instance with name "MY". The same name is passed to
# gitstatus_query in gitstatus_prompt_update. The flags with -1 as values
# enable staged, unstaged, conflicted and untracked counters.
gitstatus_stop 'MY' && gitstatus_start -s -1 -u -1 -c -1 -d -1 'MY'

# On every prompt, fetch git status and set GITSTATUS_PROMPT.
autoload -Uz add-zsh-hook
add-zsh-hook precmd gitstatus_prompt_update

# Enable/disable the right prompt options.
setopt no_prompt_bang prompt_percent prompt_subst

# Customize prompt. Put $GITSTATUS_PROMPT in it to reflect git status.
#
# Example:
#
#   user@host ~/projects/skynet master ⇡42
#   % █
# =============================================================================
#               Plugins Setup - git_time_since_commit()
# =============================================================================
# Determine if we are using a gemset.
function rvm_gemset() {
    if hash rvm 2>/dev/null; then
        GEMSET=$(rvm gemset list | grep '=>' | cut -b4-)
        if [[ -n $GEMSET ]]; then
            echo "%{$fg[yellow]%}$GEMSET%{$reset_color%}|"
        fi
    fi
}
# Determine the time since last commit. If branch is clean,
# use a neutral color, otherwise colors will vary according to time.
function git_time_since_commit() {
    GIT_TIME_SINCE_COMMIT_LEN=0
    if git rev-parse --git-dir >/dev/null 2>&1; then
        # Only proceed if there is actually a commit.
        if [[ $(git log 2>&1 >/dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
            # Get the last commit.
            last_commit=$(git log --pretty=format:'%at' -1 2>/dev/null)
            now=$(date +%s)
            seconds_since_last_commit=$((now - last_commit))

            # Totals
            MINUTES=$((seconds_since_last_commit / 60))
            HOURS=$((seconds_since_last_commit / 3600))

            # Sub-hours and sub-minutes
            DAYS=$((seconds_since_last_commit / 86400))
            SUB_HOURS=$((HOURS % 24))
            SUB_MINUTES=$((MINUTES % 60))

            if [[ -n $(git status -s 2>/dev/null) ]]; then
                if [ "$MINUTES" -gt 30 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG"
                elif [ "$MINUTES" -gt 10 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM"
                else
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT"
                fi
            else
                COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
            fi

            if [ "$HOURS" -gt 24 ]; then
                echo "$(rvm_gemset)$COLOR${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m%{$reset_color%}|"
                # The length of GITSTATUS_PROMPT after removing %f and %F.
                #GIT_TIME_SINCE_COMMIT_LEN=
            elif [ "$MINUTES" -gt 60 ]; then
                echo "$(rvm_gemset)$COLOR${HOURS}h${SUB_MINUTES}m%{$reset_color%}|"
               # GIT_TIME_SINCE_COMMIT_LEN="${(m)#%{${HOURS}h${SUB_MINUTES}m}"
                # The length of GITSTATUS_PROMPT after removing %f and %F.
                #GITSTATUS_PROMPT_LEN="${(m)#${${GITSTATUS_PROMPT//\%\%/x}//\%(f|<->F)}}"
            else
                echo "$(rvm_gemset)$COLOR${MINUTES}m%{$reset_color%}|"
               # GIT_TIME_SINCE_COMMIT_LEN=$("($(rvm_gemset)$COLOR${MINUTES}m%{$reset_color%}|" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")
               # GIT_TIME_SINCE_COMMIT_LEN="${(m)#%{${MINUTES}m}"
            fi
        else
            COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
            echo "$(rvm_gemset)$COLOR~| "
                GIT_TIME_SINCE_COMMIT_LEN=1
           # GIT_TIME_SINCE_COMMIT_LEN=$("($(rvm_gemset)$COLOR~| "  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")
        fi
    fi
}

# =============================================================================
#                       Checking directry and flip the icon
# =============================================================================
function GPS() {
    local temp_var=$(echo $(git branch 2>/dev/null)) # Send the error message to not be printed.

    if [ "$PWD" = "$HOME" ]; then
        local MYDIR='\uf015'
        echo $MYDIR
    elif [ "$PWD" = "$HOME/Desktop" ]; then
        local MYDIR='\uf498'
        echo $MYDIR
        #  elif [ -z $(git branch >/dev/null 2>/dev/null) ]; then
    elif [ ! -z "${temp_var}" ]; then
        local MYDIR='\uf1d3' #'\uf408' #'\ue5fb' #\uf1d3
        echo $MYDIR
    else
        local MYDIR='\uf115'
        echo $MYDIR
    fi

    unset MYDIR
}

# =============================================================================
#                       ELLAPS_TIME FUNCTION
#               Calculate the time between two prompt (hitting inter)
#                   Main precmd function with first arg.
# =============================================================================
zmodload zsh/datetime

prompt_preexec() {
    prompt_prexec_realtime=${EPOCHREALTIME}
}

prompt_precmd() {
    if ((prompt_prexec_realtime)); then
        local -rF elapsed_realtime=$((EPOCHREALTIME - prompt_prexec_realtime))
        local -rF s=$((elapsed_realtime % 60))
        local -ri elapsed_s=${elapsed_realtime}
        local -ri m=$(((elapsed_s / 60) % 60))
        local -ri h=$((elapsed_s / 3600))
        if ((h > 0)); then
            printf -v prompt_elapsed_time '%ih%im' ${h} ${m}
        elif ((m > 0)); then
            printf -v prompt_elapsed_time '%im%is' ${m} ${s}
        elif ((s >= 10)); then
            printf -v prompt_elapsed_time '%.2fs' ${s} # 12.34s
        elif ((s >= 1)); then
            printf -v prompt_elapsed_time '%.3fs' ${s} # 1.234s
        else
            printf -v prompt_elapsed_time '%ims' $((s * 1000))
        fi
        unset prompt_prexec_realtime
    else
        # Clear previous result when hitting ENTER with no command to execute
        unset prompt_elapsed_time
    fi
}

setopt nopromptbang prompt{cr,percent,sp,subst}

autoload -Uz add-zsh-hook
add-zsh-hook preexec prompt_preexec
add-zsh-hook precmd prompt_precmd

# =============================================================================

function dice() {
    DICE_ARRAY[1]=$'\uf6c9'
    DICE_ARRAY[2]=$'\uf6ca'
    DICE_ARRAY[3]=$'\uf6cb'
    DICE_ARRAY[4]=$'\uf6cc'
    DICE_ARRAY[5]=$'\uf6cd'
    DICE_ARRAY[6]=$'\uf6ce'
    nb=$(($RANDOM % 6 + 1))
    TEMP_DIC="${DICE_ARRAY[$nb]}"
    psvar[1]=${TEMP_DIC}
}
# =============================================================================
# We adding here the zsh hook that specified as function type, we can pass
# variables using %v, if you want to use other variable use %2v %3v See more
# here: https://stackoverflow.com/questions/36192523/zsh-prompt-customization
autoload -Uz add-zsh-hook
add-zsh-hook precmd dice

# =============================================================================
#                      Battery checking status
# =============================================================================
function battary_charge_percentage() {
    if [ -f ~/.GScript/.batcharge.py ]; then
        BATTARY_STATUS=$(echo "$(~/.GScript/.batcharge.py)" | awk '{print $1}')
        BATTARY_PERCENTAGE=$(echo "$(~/.GScript/.batcharge.py)" | awk '{print $2 $3}')
        #BATTARY_VARIABLE=$(echo "%F{#9370DB}$(~/.GScript/.batcharge.py)% %{$reset_color%}")
        BATTARY_VARIABLE=$(echo "%F{#9370DB}$BATTARY_STATUS %{$reset_color%}%F{red}  $BATTARY_PERCENTAGE %% %{$reset_color%}")

        #psvar[2]=$(echo "${BATTARY_VARIABLE}")
        # psvar[2]=$(echo "$BATTARY_STATUS")
        # psvar[3]=$(echo "$BATTARY_PERCENTAGE")
        echo "${BATTARY_VARIABLE}"
    else
        BATTARY_VARIABLE=""
        # psvar[2]=$(echo "${BATTARY_VARIABLE}")
    fi
}

#autoload -Uz add-zsh-hook
#add-zsh-hook precmd battary_charge_percentage

# =============================================================================
#                       DOCKER CONTAINER FUNCTION
#               Check the docker containers if they are running
# =============================================================================

function running_docker() {
    local temp_var=$(echo $(docker container ps -a -q))
    local temp_current_running_container_name=$(echo $(docker ps --format '{{.Names}}'))

    if [ -z "${temp_var}" ]; then
        psvar[4]=""
    else
        How_many_containers=$(echo $(docker ps -q | wc -l))
        if [ $How_many_containers != 0 ]; then
            local CONTAINER_IS_RUNNING=$(for ((i = 0; i < $How_many_containers; i++)); do echo -n '\ue7b0  '; done | awk -F '$' '{print $1}')
        else
            local CONTAINER_IS_RUNNING=""
        fi
        #local CONTAINER_IS_RUNNING=$(echo $(repeatChar '\ue7b0' $How_many_containers))
        #echo $CONTAINER_IS_RUNNING
        #echo "$CONTAINER_IS_RUNNING (${temp_current_running_container_name})"
        #psvar[4]=$(echo "$CONTAINER_IS_RUNNING")
        echo "${CONTAINER_IS_RUNNING}"
    fi
}

#autoload -Uz add-zsh-hook
#add-zsh-hook precmd running_docker
#add-zsh-hook preexec running_docker

# =============================================================================
#                       CPU USAGE
# =============================================================================
function CPU_USAGE() {
    MAX_CPU_USAGE=$(ps aux | head | sort -nrk3,3 | awk '{print $3,$11}' | head -n1 | awk '{print $1}')
    CPU_JOB_NAME=$(ps aux | head | sort -nrk3,3 | awk '{print $3,$11}' | head -n1 | awk '{print $2}')
    #psvar[5]=$(echo "$MAX_CPU_USAGE")
    #psvar[6]=$(echo "${CPU_JOB_NAME##*/}") # Getting  the last part of a directory using (##*/)
    echo " ${MAX_CPU_USAGE}%% \uf423  ${CPU_JOB_NAME##*/}"

}
#autoload -Uz add-zsh-hook
#add-zsh-hook precmd  CPU_USAGE

# =============================================================================
#                            Memory usage
# =============================================================================
function memory_uasge() {
    temp_var=$(echo $(ps -caxm -orss= | awk '{ sum += $1 } END { print "" sum/(1024 * 1000)}'))
    echo "$temp_var/32.0GB"
}

# =============================================================================
#                           Virtual Env status
# =============================================================================
# colorscheme: https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences
function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo -e "\033[37m"'\ufbf2  ''('`basename $VIRTUAL_ENV`') '
}
# \ufbf2 => ﯲ
# \uf233 =>
#  RED="\e[31m"
#       echo -n -e  "=> ${LIGHT_YELLOW}\uf128  ${ENDCOLOR} "  && echo  "${file}"
# The plugin will auto execute this `zvm_after_select_vi_mode` function
# =============================================================================
#                            Configruations
#                   zsh-bar of the right/left prompt
#          Based on https://github.com/jeffreytse/zsh-vi-mode
#          https://unix.stackexchange.com/questions/547/make-my-zsh-prompt-show-mode-in-vi-mode
#          https://thevaluable.dev/zsh-line-editor-configuration-mouseless/
# =============================================================================
# zvm_before_init_commands=()
# zvm_after_init_commands=()
# zvm_before_select_vi_mode_commands=()
# zvm_after_select_vi_mode_commands=()
# zvm_before_lazy_keybindings_commands=()
# zvm_after_lazy_keybindings_commands=()

# Initalize the prompt
function zvm_before_init_commands(){
        PROMPT=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE} ${MAC_ICON} %F{229}%m% ${PR_NO_COLOUR} on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(GPS)  '
        PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7 %K{239}%F{120}INSERT%{$reset_color%}%4v%f%F{120}%F{180}%F{blue}%{$reset_color%} %F{yellow}%1v%{$reset_color%} %K{239}$(git_time_since_commit)${PR_NO_COLOUR}${GITSTATUS_PROMPT:+$GITSTATUS_PROMPT} $(virtualenv_info)'
        PS1+=$'\n%F{blue}\u2570${RULER_CHAR}%F{blue}${ARROW}%{$reset_color%} ' #
        RPROMPT=$'%F{blue}\ufa1a:${prompt_elapsed_time} %F{yellow}${SYNC_ICON}%{$reset_color%} %{$fg[magenta]%}[ ${Date_ICON} %F{110} %D{%b %d, %Y}${PR_NO_COLOUR} - %{$fg[magenta]%}${CLOCK_ICON}%F{180} %D{%L:%M:%S %p}%{$fg[magenta]%} ] %{$reset_color%}'

}
# The plugin will auto execute this zvm_after_select_vi_mode function
# It will overwrite the initial prompt: zvm_before_init_commands
function zvm_after_select_vi_mode() {
  case $ZVM_MODE in
    $ZVM_MODE_NORMAL)
      # Something you want to do...
    PROMPT=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE} ${MAC_ICON} %F{229}%m% ${PR_NO_COLOUR} on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(GPS)  '
    PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7 %K{239}%F{120}NORMAL%{$reset_color%}%4v%f%F{120}%F{180}%F{blue}%{$reset_color%} %F{yellow}%1v%{$reset_color%} %K{239}$(git_time_since_commit)${PR_NO_COLOUR}${GITSTATUS_PROMPT:+$GITSTATUS_PROMPT} $(virtualenv_info)'
    PS1+=$'\n%F{blue}\u2570${RULER_CHAR}%F{blue}${ARROW}%{$reset_color%} ' #
    ;;
    $ZVM_MODE_INSERT)
      # Something you want to do...
    PROMPT=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE} ${MAC_ICON} %F{229}%m% ${PR_NO_COLOUR} on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(GPS)  '
    PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7 %K{239}%F{1}INSERT%{$reset_color%}%4v%f%F{120}%F{180}%F{blue}%{$reset_color%} %F{yellow}%1v%{$reset_color%} %K{239}$(git_time_since_commit)${PR_NO_COLOUR}${GITSTATUS_PROMPT:+$GITSTATUS_PROMPT} $(virtualenv_info)'
    PS1+=$'\n%F{blue}\u2570${RULER_CHAR}%F{blue}${ARROW}%{$reset_color%} ' #
    ;;
    $ZVM_MODE_VISUAL)
      # Something you want to do...
    PROMPT=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE} ${MAC_ICON} %F{229}%m% ${PR_NO_COLOUR} on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(GPS)  '
    PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7 %K{239}%F{204}VISUAL%{$reset_color%}%4v%f%F{120}%F{180}%F{blue}%{$reset_color%} %F{yellow}%1v%{$reset_color%} %K{239}$(git_time_since_commit)${PR_NO_COLOUR}${GITSTATUS_PROMPT:+$GITSTATUS_PROMPT} $(virtualenv_info)'
    PS1+=$'\n%F{blue}\u2570${RULER_CHAR}%F{blue}${ARROW}%{$reset_color%} ' #
    ;;
    $ZVM_MODE_VISUAL_LINE)
      # Something you want to do...
    PROMPT=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE} ${MAC_ICON} %F{229}%m% ${PR_NO_COLOUR} on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(GPS)  '
    PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7 %K{239}%F{206}VISUAL*%{$reset_color%}%4v%f%F{120}%F{180}%F{blue}%{$reset_color%} %F{yellow}%1v%{$reset_color%} %K{239}$(git_time_since_commit)${PR_NO_COLOUR}${GITSTATUS_PROMPT:+$GITSTATUS_PROMPT} $(virtualenv_info)'
    PS1+=$'\n%F{blue}\u2570${RULER_CHAR}%F{blue}${ARROW}%{$reset_color%} ' #
    ;;
    $ZVM_MODE_REPLACE)
      # Something you want to do...
    PROMPT=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE} ${MAC_ICON} %F{229}%m% ${PR_NO_COLOUR} on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(GPS)  '
    PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7 %K{239}%F{200}REPLACE%{$reset_color%}%4v%f%F{120}%F{180}%F{blue}%{$reset_color%} %F{yellow}%1v%{$reset_color%} %K{239}$(git_time_since_commit)${PR_NO_COLOUR}${GITSTATUS_PROMPT:+$GITSTATUS_PROMPT} $(virtualenv_info)'
    PS1+=$'\n%F{blue}\u2570${RULER_CHAR}%F{blue}${ARROW}%{$reset_color%} ' #
    ;;
  esac
  RPROMPT=$'%F{blue}\ufa1a:${prompt_elapsed_time} %F{yellow}${SYNC_ICON}%{$reset_color%} %{$fg[magenta]%}[ ${Date_ICON} %F{110} %D{%b %d, %Y}${PR_NO_COLOUR} - %{$fg[magenta]%}${CLOCK_ICON}%F{180} %D{%L:%M:%S %p}%{$fg[magenta]%} ] %{$reset_color%}'
}


# =============================================================================
#    Reference: https://blog.carbonfive.com/writing-zsh-themes-a-quickref/
# =============================================================================

# =============================================================================
#
#        ██████╗░██╗░██████╗██████╗░██╗░░░░░░█████╗░██╗░░░██╗
#        ██╔══██╗██║██╔════╝██╔══██╗██║░░░░░██╔══██╗╚██╗░██╔╝
#        ██║░░██║██║╚█████╗░██████╔╝██║░░░░░███████║░╚████╔╝░
#        ██║░░██║██║░╚═══██╗██╔═══╝░██║░░░░░██╔══██║░░╚██╔╝░░
#        ██████╔╝██║██████╔╝██║░░░░░███████╗██║░░██║░░░██║░░░
#        ╚═════╝░╚═╝╚═════╝░╚═╝░░░░░╚══════╝╚═╝░░╚═╝░░░╚═╝░░░
# The current directory gets truncated from the left if the whole prompt doesn't fit on the line.
# =============================================================================
# PROMPT='%70F%n@%m%f '                                  # green user@host
# PROMPT+='%39F%$((-GITSTATUS_PROMPT_LEN-1))<…<%~%<<%f'  # blue current working directory
# PROMPT+='${GITSTATUS_PROMPT:+ $GITSTATUS_PROMPT}'      # git status
# PROMPT+=$'\n'                                          # new line
# PROMPT+='%F{%(?.76.196)}%#%f '                         # %/# (normal/root); green/red (ok/error)
#PROMPT='${OS_ICON} %F{208}%n%f ${AT_SYMPOLE}  ${MAC_ICON}  %F{226}%m% on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(Iam_at_home)  '
#PROMPT=$'\n%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE}  ${MAC_ICON}  %F{226}%m%  on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(Iam_at_home)  '
#PROMPT+=$'\n'



#$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
# Symbols
# if [[ "${langinfo[CODESET]}" = UTF-8 ]]; then
#   PR_SET_CHARSET=""
#   PR_HBAR="─"
#   PR_ULCORNER="┌"
#   PR_LLCORNER="└"
#   PR_LRCORNER="┘"
#   PR_URCORNER="┐"
# fi

# Need this so the prompt will work.
#setopt prompt_subst

#function theme_precmd {
#        DISP=""
#        PR_FILLBAR=""
#        PR_PWDLEN=""
#        local TERMWIDTH=$(( COLUMNS - ${ZLE_RPROMPT_INDENT:-1} ))
#        local myString=$'\n\u256D\U2500${OS_ICON}%n${AT_SYMPOLE} ${MAC_ICON} %m  on   $(Iam_at_home)  '
#        local promptsize=${#myString}
#        local pwdsize=${#${(%):-%~}}
#        local FILECOUNT=$' ' # How many icons you are using in your PROMPT
#        local filesize=${#${(%):-$FILECOUNT}}
#        typeset -g BUFFERLENGTH=9
#        # if [[ $GITSTATUS_PROMPT_LEN = 0 ]];then
#        #     BUFFERLENGTH=17
#        # else
#        #     BUFFERLENGTH=17
#        # fi

#        PR_HBAR=""
#        PR_FILLBAR="\${(l:$(( TERMWIDTH - (promptsize + pwdsize + GITSTATUS_PROMPT_LEN + (2*GIT_TIME_SINCE_COMMIT_LEN) - (BUFFERLENGTH * filesize)) ))::${PR_HBAR}:)}"
#        #psvar[2]=${DISP}


#}
#autoload -U add-zsh-hook
#add-zsh-hook precmd theme_precmd


## See if we can use colors.
#autoload zsh/terminfo
#for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE GREY; do
#  typeset -g PR_$color="%{$terminfo[bold]$fg[${(L)color}]%}"
#  typeset -g PR_LIGHT_$color="%{$fg[${(L)color}]%}"
#done
#PR_NO_COLOUR="%{$terminfo[sgr0]%}"


#PROMPT=$'\n${PR_BLUE}${LCU}${OS_ICON}${PR_YELLOW} %n${PR_NO_COLOUR} ${AT_SYMPOLE} ${MAC_ICON} ${PR_MAGENTA}%m% ${PR_NO_COLOUR} on ${darkblue}%~%F{%(0?.green.red)} %(0?.\uf08b.\uf071) ${PR_GREY}$(git_time_since_commit)${GITSTATUS_PROMPT:+$GITSTATUS_PROMPT} ${(e)PR_FILLBAR}${PR_GREY}$(GPS)${PR_NO_COLOUR} ${RCU}'
#PROMPT+=$'\n'
##PROMPT+=$'${LCL}'
##PS1+=$'${LCL}%F{blue}${ARROW}%F{yellow}${ARROW}%F{red}${ARROW}%F{blue}%{$reset_color%} ' #
#PS1+=$'${LCL}%F{blue}%F{yellow}${ARROW}%F{blue}%{$reset_color%} ' #
#RPROMPT=$'%F{blue}\ufa1a:${prompt_elapsed_time} %F{yellow}${SYNC_ICON}%{$reset_color%} %{$fg[magenta]%}[ ${Date_ICON}  %D{%b %d, %Y}- ${CLOCK_ICON}  %D{%L${blue}:%M${red}:%S %p}]%{$reset_color%} ${PR_YELLOW}%1v ${RCL}'

